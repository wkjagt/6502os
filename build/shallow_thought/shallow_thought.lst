ca65 V2.18 - N/A
Main file   : shallow_thought.s
Current file: shallow_thought.s

000000r 1                               .include "strings.inc"
000000r 2               STR_STARTUP = $00
000000r 2               STR_ANY_KEY = $01
000000r 2               
000000r 1               
000000r 1                               .import init_screen
000000r 1                               .import init_keyboard
000000r 1                               .import wait_for_key_press
000000r 1                               .import send_byte_to_screen
000000r 1                               .import xmodem_receive
000000r 1               
000000r 1               .import string_table
000000r 1               
000000r 1               .zeropage
000000r 1                               ; todo: use .res 2 without it being output in the binary file
000000r 1               tmp1            = $02
000000r 1               tmp2            = $04
000000r 1               tmp3            = $06
000000r 1               
000000r 1               xmodem_byte_sink_vector = $08
000000r 1               
000000r 1                               .code
000000r 1               
000000r 1               reset:
000000r 1  20 rr rr                     jsr     init_screen
000003r 1  20 rr rr                     jsr     init_keyboard
000006r 1               
000006r 1                               ; startup message
000006r 1  A9 00                        lda     #STR_STARTUP
000008r 1  20 rr rr                     jsr     print_string
00000Br 1               
00000Br 1  A9 01                        lda     #STR_ANY_KEY
00000Dr 1  20 rr rr                     jsr     print_string
000010r 1               
000010r 1                               ; set the vector for what to do with each byte coming in through xmodem
000010r 1  A9 rr                        lda     #<print_formatted_byte_as_hex
000012r 1  85 08                        sta     xmodem_byte_sink_vector
000014r 1  A9 rr                        lda     #>print_formatted_byte_as_hex
000016r 1  85 09                        sta     xmodem_byte_sink_vector+1
000018r 1               
000018r 1               
000018r 1                               ; The sender starts transmitting bytes as soon as
000018r 1                               ; it receives a NAK byte from the receiver. To be
000018r 1                               ; able to synchronize the two, the workflow is:
000018r 1                               ; 1. start sending command on sender
000018r 1                               ; 2. Press any key on the receiver to start the
000018r 1                               ;    transmission
000018r 1  20 rr rr                     jsr     wait_for_key_press
00001Br 1  20 rr rr                     jsr     xmodem_receive
00001Er 1               
00001Er 1               ; this only adds a space
00001Er 1               print_formatted_byte_as_hex:
00001Er 1  20 rr rr                     jsr     print_byte_as_hex
000021r 1  A9 20                        lda     #' '
000023r 1  20 rr rr                     jsr     send_byte_to_screen
000026r 1  60                           rts
000027r 1               
000027r 1               print_byte_as_hex:
000027r 1  48                           pha                     ; keep a copy for the low nibble
000028r 1               
000028r 1  4A                           lsr                     ; shift high nibble into low nibble
000029r 1  4A                           lsr
00002Ar 1  4A                           lsr
00002Br 1  4A                           lsr
00002Cr 1               
00002Cr 1  20 rr rr                     jsr     print_nibble
00002Fr 1               
00002Fr 1  68                           pla                     ; get original value back
000030r 1  29 0F                        and     #%00001111      ; reset high nibble
000032r 1  20 rr rr                     jsr     print_nibble
000035r 1  60                           rts
000036r 1               
000036r 1               print_nibble:
000036r 1  C9 0A                        cmp     #10
000038r 1  B0 05                        bcs     @letter         ; >= 10 (hex letter A-F)
00003Ar 1  69 30                        adc     #48             ; ASCII offset to numbers 0-9
00003Cr 1  4C rr rr                     jmp     @print
00003Fr 1               @letter:
00003Fr 1  69 36                        adc     #54             ; ASCII offset to letters A-F
000041r 1               @print:
000041r 1  20 rr rr                     jsr     send_byte_to_screen
000044r 1  60                           rts
000045r 1               
000045r 1               print_string:
000045r 1  0A                           asl                     ; multiply by 2 because size of memory address is 2 bytes
000046r 1  A8                           tay
000047r 1  B9 rr rr                     lda     string_table,y  ; string index into string table
00004Ar 1  85 06                        sta     tmp3            ; LSB
00004Cr 1  C8                           iny
00004Dr 1  B9 rr rr                     lda     string_table,y
000050r 1  85 07                        sta     tmp3+1          ; MSB
000052r 1               
000052r 1  A0 00                        ldy #0
000054r 1               @next_char:
000054r 1  B1 06                        lda (tmp3),y
000056r 1  F0 06                        beq @done
000058r 1               
000058r 1  20 rr rr                     jsr send_byte_to_screen
00005Br 1  C8                           iny
00005Cr 1  80 F6                        bra @next_char
00005Er 1               @done:
00005Er 1  A9 0D                        lda     #$0d
000060r 1  20 rr rr                     jsr     send_byte_to_screen
000063r 1  A9 0A                        lda     #$0a
000065r 1  20 rr rr                     jsr     send_byte_to_screen
000068r 1  60                           rts
000069r 1               
000069r 1               ; strings ========================================
000069r 1               
000069r 1               ; str_startup     =       0
000069r 1               ; str_any_key     =       1
000069r 1               
000069r 1               ; string_table:
000069r 1               ;                 .word s_startup, s_any_key
000069r 1               
000069r 1               ; s_startup:      .byte "Shallow Thought v0.01", 0
000069r 1               ; s_any_key:      .byte "Press any key", 0
000069r 1               
