import pprint

san_instructions = (
    ("$00", 'brk.impl', 2),
    ("$01", 'ora.zxi', 2),
    ("$04", 'tsb.z', 2),
    ("$05", 'ora.z', 2),
    ("$06", 'asl.z', 2),
    ("$08", 'php.impl', 1),
    ("$09", 'ora.imm', 2),
    ("$0a", 'asl.impl', 1),
    ("$0c", 'tsb.abs', 3),
    ("$0d", 'ora.abs', 3),
    ("$0e", 'asl.abs', 3),
    ("$10", 'bpl.rel', 2),
    ("$11", 'ora.ziy', 2),
    ("$12", 'ora.zi', 2),
    ("$14", 'trb.z', 2),
    ("$15", 'ora.zx', 2),
    ("$16", 'asl.zx', 2),
    ("$18", 'clc.impl', 1),
    ("$19", 'ora.y', 3),
    ("$1a", 'inc.impl', 1),
    ("$1c", 'trb.abs', 3),
    ("$1d", 'ora.x', 3),
    ("$1e", 'asl.x', 3),
    ("$20", 'jsr.abs', 3),
    ("$21", 'and.zxi', 2),
    ("$24", 'bit.z', 2),
    ("$25", 'and.z', 2),
    ("$26", 'rol.z', 2),
    ("$28", 'plp.impl', 1),
    ("$29", 'and.imm', 2),
    ("$2a", 'rol.impl', 1),
    ("$2c", 'bit.abs', 3),
    ("$2d", 'and.abs', 3),
    ("$2e", 'rol.abs', 3),
    ("$30", 'bmi.rel', 2),
    ("$31", 'and.ziy', 2),
    ("$32", 'and.zi', 2),
    ("$34", 'bit.zx', 2),
    ("$35", 'and.zx', 2),
    ("$36", 'rol.zx', 2),
    ("$38", 'sec.impl', 1),
    ("$39", 'and.y', 3),
    ("$3a", 'dec.impl', 1),
    ("$3c", 'bit.x', 3),
    ("$3d", 'and.x', 3),
    ("$3e", 'rol.x', 3),
    ("$40", 'rti.impl', 1),
    ("$41", 'eor.zxi', 2),
    ("$45", 'eor.z', 2),
    ("$46", 'lsr.z', 2),
    ("$48", 'pha.impl', 1),
    ("$49", 'eor.imm', 2),
    ("$4a", 'lsr.impl', 1),
    ("$4c", 'jmp.abs', 3),
    ("$4d", 'eor.abs', 3),
    ("$4e", 'lsr.abs', 3),
    ("$50", 'bvc.rel', 2),
    ("$51", 'eor.ziy', 2),
    ("$52", 'eor.zi', 2),
    ("$55", 'eor.zx', 2),
    ("$56", 'lsr.zx', 2),
    ("$58", 'cli.impl', 1),
    ("$59", 'eor.y', 3),
    ("$5a", 'phy.impl', 1),
    ("$5d", 'eor.x', 3),
    ("$5e", 'lsr.x', 3),
    ("$60", 'rts.impl', 1),
    ("$61", 'adc.zxi', 2),
    ("$64", 'stz.z', 2),
    ("$65", 'adc.z', 2),
    ("$66", 'ror.z', 2),
    ("$68", 'pla.impl', 1),
    ("$69", 'adc.imm', 2),
    ("$6a", 'ror.impl', 1),
    ("$6c", 'jmp.i', 3),
    ("$6d", 'adc.abs', 3),
    ("$6e", 'ror.abs', 3),
    ("$70", 'bvs.rel', 2),
    ("$71", 'adc.ziy', 2),
    ("$72", 'adc.zi', 2),
    ("$74", 'stz.zx', 2),
    ("$75", 'adc.zx', 2),
    ("$76", 'ror.zx', 2),
    ("$78", 'sei.impl', 1),
    ("$79", 'adc.y', 3),
    ("$7a", 'ply.impl', 1),
    ("$7c", 'jmp.xi', 3),
    ("$7d", 'adc.x', 3),
    ("$7e", 'ror.x', 3),
    ("$80", 'bra.rel', 2),
    ("$81", 'sta.zxi', 2),
    ("$84", 'sty.z', 2),
    ("$85", 'sta.z', 2),
    ("$86", 'stx.z', 2),
    ("$88", 'dey.impl', 1),
    ("$89", 'bit.imm', 2),
    ("$8a", 'txa.impl', 1),
    ("$8c", 'sty.abs', 3),
    ("$8d", 'sta.abs', 3),
    ("$8e", 'stx.abs', 3),
    ("$90", 'bcc.rel', 2),
    ("$91", 'sta.ziy', 2),
    ("$92", 'sta.zi', 2),
    ("$94", 'sty.zx', 2),
    ("$95", 'sta.zx', 2),
    ("$96", 'stx.zy', 2),
    ("$98", 'tya.impl', 1),
    ("$99", 'sta.y', 3),
    ("$9a", 'txs.impl', 1),
    ("$9c", 'stz.abs', 3),
    ("$9d", 'sta.x', 3),
    ("$9e", 'stz.x', 3),
    ("$a0", 'ldy.imm', 2),
    ("$a1", 'lda.zxi', 2),
    ("$a2", 'ldx.imm', 2),
    ("$a4", 'ldy.z', 2),
    ("$a5", 'lda.z', 2),
    ("$a6", 'ldx.z', 2),
    ("$a8", 'tay.impl', 1),
    ("$a9", 'lda.imm', 2),
    ("$aa", 'tax.impl', 1),
    ("$ac", 'ldy.abs', 3),
    ("$ad", 'lda.abs', 3),
    ("$ae", 'ldx.abs', 3),
    ("$b0", 'bcs.rel', 2),
    ("$b1", 'lda.ziy', 2),
    ("$b2", 'lda.zi', 2),
    ("$b4", 'ldy.zx', 2),
    ("$b5", 'lda.zx', 2),
    ("$b6", 'ldx.zy', 2),
    ("$b8", 'clv.impl', 1),
    ("$b9", 'lda.y', 3),
    ("$ba", 'tsx.impl', 1),
    ("$bc", 'ldy.x', 3),
    ("$bd", 'lda.x', 3),
    ("$be", 'ldx.y', 3),
    ("$c0", 'cpy.imm', 2),
    ("$c1", 'cmp.zxi', 2),
    ("$c4", 'cpy.z', 2),
    ("$c5", 'cmp.z', 2),
    ("$c6", 'dec.z', 2),
    ("$c8", 'iny.impl', 1),
    ("$c9", 'cmp.imm', 2),
    ("$ca", 'dex.impl', 1),
    ("$cc", 'cpy.abs', 3),
    ("$cd", 'cmp.abs', 3),
    ("$ce", 'dec.abs', 3),
    ("$d0", 'bne.rel', 2),
    ("$d1", 'cmp.ziy', 2),
    ("$d2", 'cmp.zi', 2),
    ("$d5", 'cmp.zx', 2),
    ("$d6", 'dec.zx', 2),
    ("$d8", 'cld.impl', 1),
    ("$d9", 'cmp.y', 3),
    ("$da", 'phx.impl', 1),
    ("$dd", 'cmp.x', 3),
    ("$de", 'dec.x', 3),
    ("$e0", 'cpx.imm', 2),
    ("$e1", 'sbc.zxi', 2),
    ("$e4", 'cpx.z', 2),
    ("$e5", 'sbc.z', 2),
    ("$e6", 'inc.z', 2),
    ("$e8", 'inx.impl', 1),
    ("$e9", 'sbc.imm', 2),
    ("$ea", 'nop.impl', 1),
    ("$ec", 'cpx.abs', 3),
    ("$ed", 'sbc.abs', 3),
    ("$ee", 'inc.abs', 3),
    ("$f0", 'beq.rel', 2),
    ("$f1", 'sbc.ziy', 2),
    ("$f2", 'sbc.zi', 2),
    ("$f5", 'sbc.zx', 2),
    ("$f6", 'inc.zx', 2),
    ("$f8", 'sed.impl', 1),
    ("$f9", 'sbc.y', 3),
    ("$fa", 'plx.impl', 1),
    ("$fd", 'sbc.x', 3),
    ("$fe", 'inc.x', 3),
)

san_mode_to_mode = {
    "zxi":      "izx",
    "z":        "zp",
    "imm":      "imm",
    "abs":      "abs",
    "ziy":      "izy",
    "zi":       "izp",
    "zx":       "zpx",
    "y":        "aby",
    "x":        "abx",
    "zy":       "zpy",
    "i":        "ind",
    "xi":       "iax",
    "impl":     "impl",
    "rel":      "rel"
}


instructions = {}
for instruction in san_instructions:
    opcode = instruction[0]
    size = instruction[2]

    mnemonic_and_mode = instruction[1].split(".")
    mnemonic = mnemonic_and_mode[0].upper()
    mode = mnemonic_and_mode[1]
    mode = san_mode_to_mode[mode]
    
    if mnemonic not in instructions:
        instructions[mnemonic] = {}
    
    instructions[mnemonic][mode] = {
        "opcode": opcode,
        "size": size,
    }

def chunks(lst, n):
    """Yield successive n-sized chunks from lst."""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

def inst_label(mnem):
    return "inst_" + mnem.lower()


for chunk in chunks(instructions.keys(), 5):
    print("               .word  " + ", ".join(inst_label(mnem) for mnem in chunk))

print("instructions:")
for (mnem, modes) in instructions.items():
    print(inst_label(mnem) + ":       .byte \"" + mnem + "\", " + str(len(modes)))
    for (mode, data) in modes.items():
        print("                    .word mode_" + mode)
        print("                    .byte " + data["opcode"])
print("end_instructions:")